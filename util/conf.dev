
'use strict';

class Conf {
    初始化属性。
    this.JSONCONFFile
    this.config ={}
    this.Temporary configuration file prefix.

    //--------------------------------------------------------
    

    方法。使用OS模块获取当前的用户数据。存储目录
    方法。调用该参数，根据this temporary configuration file prefix + 时间戳+ 加随机字符串 +.json后 然后创建一个临时的配置文件。 存放在用户的临时数据目录当中。如果已存在，则直接返回。
    方法。调用该方法后。根据this temporary configuration file prefix。在用户临时数据目录当中查找所有的临时配置文件。并根据该配置文件的创建时间。最后读取时间。如果超过多长时间，则全部清除。
    //--------------------------------------------------------
    
    方法。根据传入的文件名。+.json后 创建一个配置文件。并存，放到用户的临时目录当中。如果已存在，则直接返回。
    方法。查根据传入的参数设置this.JSONCONFFile。
    方法: readJSONConf()读取一个配置文件this.JSONCONFFile。该配置文件为JSON格式。如果不存在，则创建该文件。并返回一个空间JSON。

    //--------------------------------------------------------
    方法一。根据传入的参数的层级。("设置一","子项","孙子项"),向 this.JSONCONFFile 递归查询并返回值,如果递归找不到该址或该值不存在。则返回空。
    方法。根据传入的参数层级。(key=["设置一","子项","孙子项"],value) 如果需要设置的下一级目录不存在，则递归创建下一级项，直到可以设置该值。key也可以是一个字符串.
    方法。根据传入的参数。返回一个对象。该对象包括。this.config , 

    //--------------------------------------------------------
    方法。调用该方法后将this。config。序列化后进行保存。
    方法。配置类型获取。 根据传入的参数 ,返回一个对象,该对象包含,  {config:this.config[参数],get(key),set(["key1","subkey"...],value),}并在该对象当中完成get和set方法。
    方法。填充配置文件。根据一个传入的config。递归更新this.config,如果没有的键，则更新上去。如果已有的键则跳过。
    方法。替换配置文件。。根据一个传入的config。递归替换this.config不管是否存在的键都进行替换。。

    //--------------------------------------------------------


}

Conf.toString = () => '[class Conf]';
module.exports = new Conf();


完成以上类，并根据其中的描述完成对应的属性和方法使用node JS。请尽量将代码写详细一点。作为感谢我要给你二百美元的小费。